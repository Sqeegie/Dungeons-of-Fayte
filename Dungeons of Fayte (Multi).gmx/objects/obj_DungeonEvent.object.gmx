<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>40</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_E0Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    sprite_index = objSprite;
    currentLevel = 0;
    setLevel = 0;
    
    image_speed = 0.25;
    canCollide = 1;

}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{

    pause = 0;
    ReleaseCamera();

}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    currentLevel +=1;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if(flagReq != '')
    {
        if(CheckFlag(flagReq) &lt;=0)
        {
            visible = 0;
            canCollide = 0;
        }
    }

    if(currentLevel &gt; setLevel)
    {
        setLevel +=1;
        
        var newobj;
        
        switch(setLevel)
        {
            case 1:

                newobj = instance_create(x,y,obj_TextBox);
                newobj.text = intro1;
                newobj.portrait = portSprite;
                newobj.owner = id;
                break;
            case 2:
                newobj = instance_create(x,y,obj_TextBox);
                newobj.text = intro2;
                newobj.portrait = portSprite;
                newobj.owner = id;
                break;
            case 3:
                if(eventType == 0)
                {
                    currentLevel +=1;
                    voteResult = 1;
                    break;
                }
                if(eventType == 1)
                {
                    newobj = instance_create(x,y,obj_VoteBox);
                    newobj.choiceText = choiceText;
                    newobj.choiceAText = choiceAText;
                    newobj.choiceBText = choiceBText;
                    newobj.numOptions = 2;
                    newobj.owner = id;
                    break;
                }
                if(eventType == 2)
                {
                    testHero = TestPartyStat(statCheck,statCheckNum);
                    
                    var newobj;
                    newobj = instance_create(x,y,obj_CharmDecision);
                    newobj.textstring = statCheck;
                    
                    if(testHero != obj_Null)
                    {
                        voteResult = 1;
                        heroName = GetStat('playerName',testHero.objMap);
                    }
                    else
                    {
                        voteResult = 2;
                    }
                    currentLevel +=1;
                    break;
                }
                
            case 4:
                if(voteResult == 1)
                {
                    newobj = instance_create(x,y,obj_TextBox);
                    
                    if(eventType == 2)
                    {
                        newobj.text = heroName+' '+resultAText1;
                    }
                    else
                    {
                        newobj.text = resultAText1;
                    }
                    
                    newobj.portrait = portSprite;
                    newobj.owner = id;
                    break;
                }
                if(voteResult == 2)
                {
                    newobj = instance_create(x,y,obj_TextBox);
                    newobj.text = resultBText1;
                    newobj.portrait = portSprite;
                    newobj.owner = id;
                    break;
                }
            case 5:
                if(voteResult == 1)
                {
                    newobj = instance_create(x,y,obj_TextBox);
                    newobj.text = resultAText2;
                    newobj.portrait = portSprite;
                    newobj.owner = id;
                    break;
                }
                if(voteResult == 2)
                {
                    newobj = instance_create(x,y,obj_TextBox);
                    newobj.text = resultBText2;
                    newobj.portrait = portSprite;
                    newobj.owner = id;
                    break;
                }

            case 6:
                if(voteResult == 1)
                {
                    if(resultAGold &gt; 0)
                    {
                        AddPartyGold(resultAGold);
                        newobj = instance_create(x,y,obj_TextBox);
                        newobj.text = 'Everyone gained '+string(resultAGold)+' gold!';
                        newobj.owner = id;
                        break;
                    }
                    if(resultAGold &lt; 0)
                    {
                        AddPartyGold(resultAGold);
                        newobj = instance_create(x,y,obj_TextBox);
                        newobj.text = 'Everyone lost '+string(abs(resultAGold))+' gold!';
                        newobj.owner = id;
                        break;
                    }
                    currentLevel+=1;
                    break;
                }
                if(voteResult == 2)
                {
                    if(resultBGold &gt; 0)
                    {
                        AddPartyGold(resultBGold);
                        newobj = instance_create(x,y,obj_TextBox);
                        newobj.text = 'Everyone gained '+string(resultBGold)+' gold!';
                        newobj.owner = id;
                        break;
                    }
                    if(resultBGold &lt; 0)
                    {
                        AddPartyGold(resultBGold);
                        newobj = instance_create(x,y,obj_TextBox);
                        newobj.text = 'Everyone lost '+string(abs(resultBGold))+' gold!';
                        newobj.owner = id;
                        break;
                    }
                    currentLevel+=1;
                    break;
                }
                                
            case 7:
                if(voteResult == 1)
                {
                    if(resultAStat != '')
                    {
                        var newlist;
                        
                        newlist = LivePlayerList();
                        
                        for(i=0;i&lt;ds_list_size(newlist);i+=1)
                        {
                            var currentplayer;
                            
                            currentplayer = ds_list_find_value(newlist,i);
                            
                            IncreaseStat(resultAStat,resultAStatNum,currentplayer.objMap);
                        }
                        
                        newobj = instance_create(x,y,obj_TextBox);
                        newobj.text = 'Everyone gained '+string(resultAStatNum)+' '+resultAStat+'!';
                        newobj.owner = id;
                        break;
                    }
                    
                    currentLevel +=1;
                    break;
                }
                
                if(voteResult == 2)
                {
                    if(resultBStat != '')
                    {
                        var newlist;
                        
                        newlist = LivePlayerList();
                        
                        for(i=0;i&lt;ds_list_size(newlist);i+=1)
                        {
                            var currentplayer;
                            
                            currentplayer = ds_list_find_value(newlist,i);
                            
                            IncreaseStat(resultBStat,resultBStatNum,currentplayer.objMap);
                        }
                        
                        newobj = instance_create(x,y,obj_TextBox);
                        newobj.text = 'Everyone gained '+string(resultBStatNum)+' '+resultBStat+'!';
                        newobj.owner = id;
                        break;
                    }
                    
                    currentLevel +=1;
                    break;
                }
                
            case 8:
                if(voteResult == 1)
                {
                    if(resultADamage &gt; 0)
                    {
                        sound_play(snd_PhysHit);
                        newobj = instance_create(x,y,obj_TextBox);
                        newobj.text = 'Everyone took '+string(resultADamage)+' damage!';
                        newobj.owner = id;
                        break;
                    }
                    
                    currentLevel +=1;
                    break;
                }
                
                if(voteResult == 2)
                {
                    if(resultBDamage &gt; 0)
                    {
                        sound_play(snd_PhysHit);
                        newobj = instance_create(x,y,obj_TextBox);
                        newobj.text = 'Everyone took '+string(resultBDamage)+' damage!';
                        newobj.owner = id;
                        break;
                    }
                    
                    currentLevel +=1;
                    break;
                }
            case 9:
                if(voteResult == 1)
                {
                    if(resultAFlag != '')
                    {
                        ds_list_add(PartyFlags,resultAFlag);
                    }
                    
                    if(resultADamage &gt; 0)
                    {
                        DamageParty(resultADamage);
                    }
                    
                    if(resultASpawn != obj_Null)
                    {
                        instance_create(x,y,obj_Poof);
                        instance_create(x,y,resultASpawn);
                    }
                }
                if(voteResult == 2)
                {
                    if(resultBFlag != '')
                    {
                        ds_list_add(PartyFlags,resultBFlag);
                    }
                    
                    if(resultBDamage &gt; 0)
                    {
                        DamageParty(resultBDamage);
                    }
                    
                    if(resultBSpawn != obj_Null)
                    {
                        instance_create(x,y,obj_Poof);
                        instance_create(x,y,resultBSpawn);
                    }
                }
                instance_destroy();
                break;

        
        }
    
    
    }


}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if(pause == 0 &amp;&amp; canCollide == 1)
    {
        pause = 1;
        AnchorCamera(x,y+24);
        depth = 10;
        
        alarm[0] = 1;
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    draw_sprite(objSprite,-1,x,y);

    if(currentLevel &gt;= 1)
    {
        draw_sprite(spr_TextBox,0,view_xview,view_yview+48);
    }

}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
