<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_P0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>0</persistent>
  <parentName>obj_Solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    image_speed = 0.25;
    SetVis(object_index,GetStat('class',objMap));

    //determines sprite orientation stuff
    facedirection = 0;
    
    //general checks
    canHurt = 1;
    canMove = 1;
    canSpecial = 1;
    inLocation = 0;
    
    //for hurtling the player backward
    forcex = 0;
    forcey = 0;
    
    //special cases
    stealth = 0;
    charging = 0;
    chargeAmount = 0;
    specAttack = obj_Null;
    shielded = 0;
    barbCharge = 0;
    blessed = 0;
    blinking = 0;
    rolling = 0;
    morph = 0;
    legendno = 0;
    dragged = 0;
    
    //Health
    currentHealth = round(GetStat('life',objMap) + (GetStat('fortitude',objMap)/2));
    healHealth = currentHealth;
    
    //spawn the appropriate indicator
    var newobj;
    newobj = instance_create(x,y,obj_Ind);
    newobj.player = object_index;
    
    ADown1 = 0;
    ADown2 = 0;
    BDown1 = 0;
    BDown2 = 0;
    
    UpDown1 = 0;
    UpDown2 = 0;
    DownDown1 = 0;
    DownDown2 = 0;
    
    kill = 0;
    
    objMapMonster = NullMonster;
    
    alarm[3] = 10;
}</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    enemy = 0;

    //SavePlayer(objMap);
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if(stealth == 1)
    {
        ExitStealth(self);
    }
    else
    {
        canSpecial = 1;
    }

}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    shocked = 0;


}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if(alarm[2] &lt;= 0)
    {
        if(blinking == 1)
        {
            if(image_blend == c_red)
            {
                image_blend = c_white;
            }
            else
            {
                image_blend = c_red;
            }
        }
        else
        {
            image_blend = c_white;
        }
    }

    alarm[3] = 10;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    canHurt = 1;
    image_blend = c_white;




}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    switch(facedirection)
    {
        case 0:
            sprite_index = standR;
            break;
        case 45:
        case 90:
        case 135:
            sprite_index = standU;
            break;
        case 180:
            sprite_index = standL;
            break;
        case 225:
        case 270:
        case 315:
            sprite_index = standD;
            break;
    }
    
    rolling = 0;
    
    /*switch(sprite_index)
    {
        case attR:
            sprite_index = standR;
            break;
        case attU:
            sprite_index = standU;
            break;
        case attL:
            sprite_index = standL;
            break;
        case attD:
            sprite_index = standD;
            break;
    }*/
    image_speed = 0.25;
    canMove = 1;


}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    AttackComplete();


}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    HandlePause();
    
    switch(GetStat('control',objMap))
    {
        case 0:
            KeyboardA();
            break;
        case 1:
            KeyboardB();
            break;
        case 2:
            Mouse();
            break;
        case 3:
            ControllerA();
            break;
        case 4:
            ControllerB();
            break;
        case 5:
            KeyboardC();
            break;
        case 6:
            KeyboardD();
            break;
        case 100:
            KeyboardS();
            break;
    }
    
    if(pause == 0)
    {
        if(healHealth &gt; currentHealth)
        {
            healHealth -= 0.05;
            
            if(healHealth &lt; currentHealth)
            {
                healHealth = currentHealth;
            }
        
        }
    }

    ForceMove();
    
    if(currentHealth &lt;= 0)
    {
        Death();
    }
    
    if(kill == 1)
    {
        instance_destroy();
    }
    
    if(currentHealth &lt; (round(GetStat('life',objMap) + (GetStat('fortitude',objMap)/2)))*0.2)
    {
        blinking = 1;
    
    }
    else
    {
        blinking = 0;
    
    }

}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Pickup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    var tempdoodle, tempquant;

    if(other.share == 1)
    {

        tempdoodle = other.money;
        //tempquant = ds_list_size(LivePlayerList());
    
        tempdoodle = round(tempdoodle/numPlayers);
    }
    else
    {
        tempdoodle = round(other.money);
    }

    AddPartyGold(tempdoodle);
    
    var newthing;
    newthing = instance_create(x,y,obj_LootNum);
    newthing.money = tempdoodle;


}</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{

    if(GetStat('control',objMap) == 2)
    {
        PressDown();
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if(GetStat('control',objMap) == 2)
    {
        PressUp();
    }



}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if(room == rm_Legends)
    {
        ResetPlayerMap(objMap);
        SetVis(object_index,GetStat('class',objMap));
        
        //Health
        currentHealth = round(GetStat('life',objMap) + (GetStat('fortitude',objMap)/2));
        healHealth = currentHealth;
    }
    

}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
